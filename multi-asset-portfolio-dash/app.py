{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "authorship_tag": "ABX9TyOIYejQBo4q2bARAS3ImpUf",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/xlmoliveirax/bitcoin-data-quant/blob/main/day7_multiasset-dash/app.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\"\"\"\n",
        "Dashboard interativo para simula√ß√£o de portf√≥lio com at√© 5 ativos.\n",
        "Inclui m√©tricas de performance (CAGR, Volatilidade, Sharpe)\n",
        "e funcionalidades de exporta√ß√£o (CSV e PNG), com layout responsivo.\n",
        "\n",
        "\n",
        "Autor: Lucas Oliveira\n",
        "Vers√£o: 1.0 (beta)\n",
        "Data de cria√ß√£o: 2025-08-06\n",
        "Linguagem: Python 3.10+\n",
        "Frameworks: Dash, Plotly, Pandas, yFinance\n",
        "Depend√™ncias adicionais: Kaleido (para exporta√ß√£o de gr√°ficos)\n",
        "\n",
        "Publica√ß√£o planejada: Render.com (usando gunicorn)\n",
        "Licen√ßa: MIT\n",
        "\"\"\"\n",
        "\n",
        "import io\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import yfinance as yf\n",
        "import plotly.express as px\n",
        "import plotly.io as pio\n",
        "from dash import Dash, html, dcc, Input, Output, State, callback_context as ctx, dash_table\n",
        "\n",
        "# ---------------------- Config ----------------------\n",
        "ASSET_OPTIONS = [\n",
        "    {'label': 'S&P 500 (SPY)', 'value': 'SPY'},\n",
        "    {'label': 'Nasdaq 100 (QQQ)', 'value': 'QQQ'},\n",
        "    {'label': 'Dow Jones (DIA)', 'value': 'DIA'},\n",
        "    {'label': 'US Treasuries 7‚Äì10Y (IEF)', 'value': 'IEF'},\n",
        "    {'label': 'US Treasuries 20Y+ (TLT)', 'value': 'TLT'},\n",
        "    {'label': 'Total US Bonds (BND)', 'value': 'BND'},\n",
        "    {'label': 'Short T-Bills (BIL)', 'value': 'BIL'},\n",
        "    {'label': 'Short Treasuries 1‚Äì3Y (SHY)', 'value': 'SHY'},\n",
        "    {'label': 'T-Bills 0‚Äì3M (SGOV)', 'value': 'SGOV'},\n",
        "    {'label': 'Gold (GLD)', 'value': 'GLD'},\n",
        "    {'label': 'Silver (SLV)', 'value': 'SLV'},\n",
        "    {'label': 'Oil WTI (USO)', 'value': 'USO'},\n",
        "    {'label': 'Bitcoin (BTC-USD)', 'value': 'BTC-USD'},\n",
        "    {'label': 'Ethereum (ETH-USD)', 'value': 'ETH-USD'},\n",
        "    {'label': 'MicroStrategy (MSTR)', 'value': 'MSTR'},\n",
        "    {'label': 'Tesla (TSLA)', 'value': 'TSLA'},\n",
        "    {'label': 'Coinbase (COIN)', 'value': 'COIN'},\n",
        "    {'label': 'Riot Platforms (RIOT)', 'value': 'RIOT'},\n",
        "    {'label': 'Marathon Digital (MARA)', 'value': 'MARA'},\n",
        "]\n",
        "\n",
        "PERIOD_OPTIONS = [\n",
        "    {'label': '30 days', 'value': '30d'},\n",
        "    {'label': '90 days', 'value': '90d'},\n",
        "    {'label': '180 days', 'value': '180d'},\n",
        "    {'label': '365 days', 'value': '365d'},\n",
        "    {'label': '2 years', 'value': '2y'},\n",
        "    {'label': '5 years', 'value': '5y'},\n",
        "    {'label': '10 years', 'value': '10y'},\n",
        "    {'label': 'Max available', 'value': 'max'},\n",
        "]\n",
        "\n",
        "# ---------------------- Helpers ----------------------\n",
        "def get_prices(tickers, period):\n",
        "    tickers = list(dict.fromkeys(tickers))\n",
        "    if not tickers:\n",
        "        return pd.DataFrame()\n",
        "    df = yf.download(tickers, period=period, auto_adjust=True, progress=False)\n",
        "    if isinstance(df, pd.DataFrame) and 'Close' in df.columns:\n",
        "        pxs = df['Close'].copy()\n",
        "    else:\n",
        "        pxs = df.copy()\n",
        "        if isinstance(pxs.columns, pd.MultiIndex):\n",
        "            pxs.columns = [c[-1] for c in pxs.columns]\n",
        "    pxs = pxs.reindex(columns=tickers).dropna(how='any')\n",
        "    return pxs\n",
        "\n",
        "def calc_metrics_from_base100(series_base100):\n",
        "    if series_base100 is None or series_base100.empty:\n",
        "        return np.nan, np.nan, np.nan\n",
        "    ret = series_base100.pct_change().dropna()\n",
        "    if ret.empty:\n",
        "        return np.nan, np.nan, np.nan\n",
        "    anos = (series_base100.index[-1] - series_base100.index[0]).days / 365\n",
        "    if anos <= 0:\n",
        "        return np.nan, np.nan, np.nan\n",
        "    cagr = (series_base100.iloc[-1] / series_base100.iloc[0])**(1/anos) - 1\n",
        "    vol = ret.std() * np.sqrt(252)\n",
        "    sharpe = cagr / vol if vol and vol != 0 else np.nan\n",
        "    return cagr, vol, sharpe\n",
        "\n",
        "def normalize_weights(weights):\n",
        "    s = sum(weights)\n",
        "    if s <= 0:\n",
        "        return [1/len(weights)]*len(weights) if weights else []\n",
        "    return [w/s for w in weights]\n",
        "\n",
        "def clamp01(v):\n",
        "    try:\n",
        "        v = float(v)\n",
        "    except:\n",
        "        v = 0.0\n",
        "    return max(0.0, min(100.0, v))\n",
        "\n",
        "def asset_row(prefix, default_label, default_value, default_weight):\n",
        "    return html.Div([\n",
        "        html.Div([\n",
        "            dcc.Checklist(\n",
        "                id=f'{prefix}-enable',\n",
        "                options=[{'label': ' Include', 'value': 'on'}],\n",
        "                value=['on' if default_value else ''],\n",
        "                style={'width': '120px'}\n",
        "            ),\n",
        "            dcc.Dropdown(\n",
        "                id=f'{prefix}-ticker',\n",
        "                options=ASSET_OPTIONS,\n",
        "                value=default_value,\n",
        "                placeholder=default_label\n",
        "            ),\n",
        "        ], style={\n",
        "            'display': 'grid',\n",
        "            'gridTemplateColumns': '120px 1fr',\n",
        "            'columnGap': '12px',\n",
        "            'alignItems': 'center'\n",
        "        }),\n",
        "        html.Div([\n",
        "            dcc.Slider(\n",
        "                id=f'{prefix}-w-slider',\n",
        "                min=0, max=100, step=1, value=default_weight,\n",
        "                marks=None, tooltip={'placement': 'bottom'}\n",
        "            ),\n",
        "            dcc.Input(\n",
        "                id=f'{prefix}-w-input',\n",
        "                type='number', min=0, max=100, step=1, value=default_weight,\n",
        "                style={'width': '100%'}\n",
        "            )\n",
        "        ], style={\n",
        "            'display': 'grid',\n",
        "            'gridTemplateColumns': '1fr 100px',\n",
        "            'columnGap': '12px',\n",
        "            'alignItems': 'center',\n",
        "            'marginTop': '6px'\n",
        "        }),\n",
        "        html.Hr(style={'margin': '10px 0'})\n",
        "    ])\n",
        "\n",
        "# ---------------------- App ----------------------\n",
        "app = Dash(__name__)\n",
        "\n",
        "app.layout = html.Div([\n",
        "    html.H1(\"Multi-Asset Portfolio Dashboard (at√© 5 ativos)\", style={\n",
        "        'textAlign': 'center', 'maxWidth': '1200px', 'margin': '16px auto'\n",
        "    }),\n",
        "    html.Hr(style={'maxWidth': '1200px'}),\n",
        "\n",
        "    html.Div([\n",
        "        html.Div([\n",
        "            html.Label(\"Select Period:\"),\n",
        "            dcc.Dropdown(id='period', options=PERIOD_OPTIONS, value='365d'),\n",
        "            html.Br(),\n",
        "            html.Label(\"Selecione at√© 5 ativos e defina os pesos (normalizados entre os inclu√≠dos).\"),\n",
        "\n",
        "            asset_row('a1', 'Ativo 1', 'SPY', 50),\n",
        "            asset_row('a2', 'Ativo 2', 'IEF', 30),\n",
        "            asset_row('a3', 'Ativo 3', 'BTC-USD', 20),\n",
        "            asset_row('a4', 'Ativo 4', None, 0),\n",
        "            asset_row('a5', 'Ativo 5', None, 0),\n",
        "\n",
        "            dcc.Checklist(\n",
        "                id='show-components',\n",
        "                options=[{'label': ' Show individual assets', 'value': 'show'}],\n",
        "                value=[]\n",
        "            ),\n",
        "        ], style={\n",
        "            'width':'100%', 'maxWidth':'1200px', 'margin':'0 auto', 'padding':'10px',\n",
        "            'border':'1px solid #eee', 'borderRadius':'8px', 'background':'#fafafa'\n",
        "        }),\n",
        "    ]),\n",
        "\n",
        "    html.Div(style={'height': '12px'}),\n",
        "\n",
        "    # Bot√µes de exporta√ß√£o + Download components + Stores\n",
        "    html.Div([\n",
        "        html.Button(\"‚¨áÔ∏è Export CSV (Chart Data)\", id='btn-export-csv', n_clicks=0,\n",
        "                    style={'marginRight': '8px'}),\n",
        "        html.Button(\"üñºÔ∏è Export PNG (Chart)\", id='btn-export-png', n_clicks=0),\n",
        "        dcc.Download(id='dl-csv'),\n",
        "        dcc.Download(id='dl-png'),\n",
        "        dcc.Store(id='store-df-plot'),   # armazena df_plot (orient='split')\n",
        "    ], style={'maxWidth': '1200px', 'margin': '0 auto 10px auto'}),\n",
        "\n",
        "    html.Div([\n",
        "        html.Div(id='metrics-table', style={'maxWidth':'1200px', 'margin':'0 auto 16px auto'}),\n",
        "        dcc.Graph(id='portfolio-chart', style={\n",
        "            'height':'620px', 'maxWidth':'1200px', 'margin':'0 auto'\n",
        "        })\n",
        "    ])\n",
        "])\n",
        "\n",
        "# ---------------------- Callback principal ----------------------\n",
        "@app.callback(\n",
        "    [\n",
        "        Output('portfolio-chart', 'figure'),\n",
        "        Output('metrics-table', 'children'),\n",
        "        Output('a1-w-slider', 'value'), Output('a1-w-input', 'value'),\n",
        "        Output('a2-w-slider', 'value'), Output('a2-w-input', 'value'),\n",
        "        Output('a3-w-slider', 'value'), Output('a3-w-input', 'value'),\n",
        "        Output('a4-w-slider', 'value'), Output('a4-w-input', 'value'),\n",
        "        Output('a5-w-slider', 'value'), Output('a5-w-input', 'value'),\n",
        "        Output('store-df-plot', 'data'),   # <-- serialize df_plot para exporta√ß√£o CSV\n",
        "    ],\n",
        "    [\n",
        "        Input('period', 'value'),\n",
        "        Input('a1-enable', 'value'), Input('a1-ticker', 'value'),\n",
        "        Input('a1-w-slider', 'value'), Input('a1-w-input', 'value'),\n",
        "        Input('a2-enable', 'value'), Input('a2-ticker', 'value'),\n",
        "        Input('a2-w-slider', 'value'), Input('a2-w-input', 'value'),\n",
        "        Input('a3-enable', 'value'), Input('a3-ticker', 'value'),\n",
        "        Input('a3-w-slider', 'value'), Input('a3-w-input', 'value'),\n",
        "        Input('a4-enable', 'value'), Input('a4-ticker', 'value'),\n",
        "        Input('a4-w-slider', 'value'), Input('a4-w-input', 'value'),\n",
        "        Input('a5-enable', 'value'), Input('a5-ticker', 'value'),\n",
        "        Input('a5-w-slider', 'value'), Input('a5-w-input', 'value'),\n",
        "        Input('show-components', 'value')\n",
        "    ]\n",
        ")\n",
        "def update_all(period,\n",
        "               a1_en, a1_tk, a1_ws, a1_wi,\n",
        "               a2_en, a2_tk, a2_ws, a2_wi,\n",
        "               a3_en, a3_tk, a3_ws, a3_wi,\n",
        "               a4_en, a4_tk, a4_ws, a4_wi,\n",
        "               a5_en, a5_tk, a5_ws, a5_wi,\n",
        "               show_components):\n",
        "\n",
        "    trig = ctx.triggered[0]['prop_id'] if ctx.triggered else ''\n",
        "\n",
        "    def choose_weight(prefix, ws, wi):\n",
        "        if f'{prefix}-w-input' in trig:\n",
        "            return clamp01(wi)\n",
        "        elif f'{prefix}-w-slider' in trig:\n",
        "            return clamp01(ws)\n",
        "        else:\n",
        "            return clamp01(wi if wi is not None else ws)\n",
        "\n",
        "    slots = [\n",
        "        ('a1', a1_tk, a1_en, choose_weight('a1', a1_ws, a1_wi)),\n",
        "        ('a2', a2_tk, a2_en, choose_weight('a2', a2_ws, a2_wi)),\n",
        "        ('a3', a3_tk, a3_en, choose_weight('a3', a3_ws, a3_wi)),\n",
        "        ('a4', a4_tk, a4_en, choose_weight('a4', a4_ws, a4_wi)),\n",
        "        ('a5', a5_tk, a5_en, choose_weight('a5', a5_ws, a5_wi)),\n",
        "    ]\n",
        "\n",
        "    included = []\n",
        "    for _, tk, en, w in slots:\n",
        "        if en and 'on' in en and tk:\n",
        "            included.append((tk, w))\n",
        "\n",
        "    if not included:\n",
        "        included = [('SPY', 50.0), ('IEF', 30.0), ('BTC-USD', 20.0)]\n",
        "\n",
        "    tickers = [t for t, _ in included]\n",
        "    raw_weights = [w/100.0 for _, w in included]\n",
        "    w_norm = normalize_weights(raw_weights)\n",
        "\n",
        "    prices = get_prices(tickers, period)\n",
        "    if prices.empty:\n",
        "        fig = px.line(pd.DataFrame({'Empty': []}))\n",
        "        empty_table = html.Div(\"No data for selected period.\")\n",
        "        return fig, empty_table, a1_ws, a1_wi, a2_ws, a2_wi, a3_ws, a3_wi, a4_ws, a4_wi, a5_ws, a5_wi, None\n",
        "\n",
        "    returns = prices.pct_change().dropna()\n",
        "    rp = (returns * w_norm).sum(axis=1)\n",
        "    curva = (1 + rp).cumprod() * 100\n",
        "    curva.name = 'Portfolio'\n",
        "\n",
        "    # Tabela de m√©tricas (2 casas decimais na visualiza√ß√£o)\n",
        "    rows = []\n",
        "    cagr_p, vol_p, sharpe_p = calc_metrics_from_base100(curva)\n",
        "    rows.append({'Asset': 'Portfolio', 'Weight %': 100.0, 'CAGR %': cagr_p*100, 'Vol %': vol_p*100, 'Sharpe': sharpe_p})\n",
        "    for tk, wn in zip(tickers, w_norm):\n",
        "        base100 = prices[tk] / prices[tk].iloc[0] * 100\n",
        "        cagr, vol, sharpe = calc_metrics_from_base100(base100)\n",
        "        rows.append({'Asset': tk, 'Weight %': wn*100, 'CAGR %': cagr*100, 'Vol %': vol*100, 'Sharpe': sharpe})\n",
        "    df_metrics = pd.DataFrame(rows)\n",
        "\n",
        "    table = dash_table.DataTable(\n",
        "        columns=[\n",
        "            {'name': 'Asset', 'id': 'Asset'},\n",
        "            {'name': 'Weight %', 'id': 'Weight %', 'type': 'numeric', 'format': {'specifier': '.2f'}},\n",
        "            {'name': 'CAGR %', 'id': 'CAGR %', 'type': 'numeric', 'format': {'specifier': '.2f'}},\n",
        "            {'name': 'Vol %', 'id': 'Vol %', 'type': 'numeric', 'format': {'specifier': '.2f'}},\n",
        "            {'name': 'Sharpe', 'id': 'Sharpe', 'type': 'numeric', 'format': {'specifier': '.2f'}},\n",
        "        ],\n",
        "        data=df_metrics.to_dict('records'),\n",
        "        style_table={'overflowX': 'auto'},\n",
        "        style_cell={'padding': '6px', 'textAlign': 'center'},\n",
        "        style_header={'fontWeight': 'bold'},\n",
        "        sort_action='native'\n",
        "    )\n",
        "\n",
        "    df_plot = curva.to_frame()\n",
        "    if 'show' in (show_components or []):\n",
        "        comp = (prices / prices.iloc[0] * 100)\n",
        "        df_plot = pd.concat([df_plot, comp], axis=1)\n",
        "    fig = px.line(df_plot, x=df_plot.index, y=df_plot.columns,\n",
        "                  labels={'x':'Date', 'value':'Index (Base 100)', 'variable':'Series'},\n",
        "                  title='Portfolio Growth (Base 100)')\n",
        "\n",
        "    # Serializa df_plot para exporta√ß√£o (orient='split' preserva index/cols)\n",
        "    df_plot_json = df_plot.to_json(orient='split', date_format='iso')\n",
        "\n",
        "    def sync(ws, wi):\n",
        "        v = clamp01(wi if wi is not None else ws)\n",
        "        v_int = int(round(v))\n",
        "        return v_int, v_int\n",
        "\n",
        "    a1_ws_out, a1_wi_out = sync(a1_ws, a1_wi)\n",
        "    a2_ws_out, a2_wi_out = sync(a2_ws, a2_wi)\n",
        "    a3_ws_out, a3_wi_out = sync(a3_ws, a3_wi)\n",
        "    a4_ws_out, a4_wi_out = sync(a4_ws, a4_wi)\n",
        "    a5_ws_out, a5_wi_out = sync(a5_ws, a5_wi)\n",
        "\n",
        "    return fig, table, a1_ws_out, a1_wi_out, a2_ws_out, a2_wi_out, a3_ws_out, a3_wi_out, a4_ws_out, a4_wi_out, a5_ws_out, a5_wi_out, df_plot_json\n",
        "\n",
        "# ---------------------- Callback: Export CSV ----------------------\n",
        "@app.callback(\n",
        "    Output('dl-csv', 'data'),\n",
        "    Input('btn-export-csv', 'n_clicks'),\n",
        "    State('store-df-plot', 'data'),\n",
        "    prevent_initial_call=True\n",
        ")\n",
        "def export_csv(n_clicks, df_plot_json):\n",
        "    if not df_plot_json:\n",
        "        return None\n",
        "    df_plot = pd.read_json(df_plot_json, orient='split')\n",
        "    # nome do arquivo com colunas concatenadas\n",
        "    cols = \"_\".join([str(c) for c in df_plot.columns])\n",
        "    filename = f\"chart_data_{cols}.csv\" if cols else \"chart_data.csv\"\n",
        "    return dcc.send_data_frame(df_plot.to_csv, filename, index=True)\n",
        "\n",
        "# ---------------------- Callback: Export PNG ----------------------\n",
        "@app.callback(\n",
        "    Output('dl-png', 'data'),\n",
        "    Input('btn-export-png', 'n_clicks'),\n",
        "    State('portfolio-chart', 'figure'),\n",
        "    prevent_initial_call=True\n",
        ")\n",
        "def export_png(n_clicks, fig_dict):\n",
        "    if not fig_dict:\n",
        "        return None\n",
        "    fig = pio.from_json(pio.to_json(fig_dict))  # garante objeto Figure\n",
        "\n",
        "    def to_png_bytes(bytes_io):\n",
        "        # requer 'kaleido': pip install kaleido\n",
        "        img_bytes = fig.to_image(format=\"png\", scale=2)\n",
        "        bytes_io.write(img_bytes)\n",
        "\n",
        "    return dcc.send_bytes(to_png_bytes, \"portfolio_chart.png\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    app.run_server(debug=True)\n"
      ],
      "metadata": {
        "id": "TIoJ6OLmZZnB"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
